name: ci

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  id-token: write
  pull-requests: write

on:
  push:
    paths:
      - '.github/workflows/ci.yml'
      - '**'

  pull_request:
    paths:
      - '.github/workflows/ci.yml'
      - '**'

jobs:
  setup:
    if: github.event_name != 'release'
    runs-on: ubuntu-latest
    outputs:
      dirs: ${{ steps.matrix.outputs.dirs }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Get the list of Python Directories
        id: matrix
        run: |
          set -euo pipefail
          dirs=$(find -mindepth 2 -maxdepth 2 -type f -name 'pyproject.toml' -printf '%h\n' | cut -d/ -f2- | sort | tr "\n" " " | awk '{$1=$1};1')
          dirs=$(jq -n --indent 0 --arg dirs "$dirs" '$dirs | split(" ")')
          echo "dirs=$dirs" >> $GITHUB_OUTPUT

      - run: |
          echo "dirs=${{ steps.matrix.outputs.dirs }}"

  test:
    if: github.event_name != 'release'
    needs: [ setup ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dirs: ${{ fromJSON(needs.setup.outputs.dirs) }}
        python-version: ['3.13']

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1.4.1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: ${{ matrix.dirs }}/.venv
          key: venv-pypi-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ matrix.dirs }}-${{ hashFiles(env.POETRY_LOCK_FILE) }}
        env:
          POETRY_LOCK_FILE: '${{ github.workspace }}/${{ matrix.dirs }}/poetry.lock'

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root --with dev --quiet
        working-directory: ${{ matrix.dirs }}

      - name: List dependencies
        run: |
          poetry show
        working-directory: ${{ matrix.dirs }}

      - name: Setup Test Results
        run: |
          mkdir -p ${{ github.workspace }}/build/coverage
          mkdir -p ${{ github.workspace }}/build/test-results

      - name: Run tests and collect coverage
        run: |
          set -euox pipefail
          PACKAGE=$(echo "$(basename $PWD)" | tr "-" "_")
          [ -d "${PACKAGE}" ] || PACKAGE="."
          poetry run pytest --cov-report=xml:${{ github.workspace }}/build/coverage/${{ matrix.dirs }}.xml --cov="${PACKAGE}" --junitxml=${{ github.workspace }}/build/test-results/${{ matrix.dirs }}.xml
        working-directory: ${{ matrix.dirs }}

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/*.xml'

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: build/coverage/${{ matrix.dirs }}.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
